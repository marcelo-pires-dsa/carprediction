library(tidyverse)
source("./R/helpers.R")
source("./R/plots.R")
# load dataset
car_dataset <- read.csv("./data/cardetails-clean.csv")
View(car_dataset)
features <- c(year, kilometer,
length, width, height, seating.capacity, fuel.tank.capacity, price)
features <- c("year", "kilometer",
"length", "width", "height",
"seating.capacity", "fuel.tank.capacity", "price")
selected_features <- car_dataset %>% select(features)
selected_features <- car_dataset %>% select(all_of(features))
View(selected_features)
selected_features <- car_dataset %>%
select(all_of(features)) %>%
where(!ns.na())
selected_features <- car_dataset %>%
select(all_of(features)) %>%
where(!is_na)
selected_features %>% where(!is_na)
ggcorplot(selected_features)
library(ggcorrplot)
ggcorplot(selected_features)
ggcorrplot(selected_features)
corr <- cor(selected_features)
View(corr)
features <- c("year", "kilometer","price")
selected_features <- car_dataset %>%
select(all_of(features))
corr <- cor(selected_features)
# Exibe a matrix de correçalação
cplot <- ggcorrplot(corr)
View(cplot)
# Exibe a matrix de correçalação
ggcorrplot(corr)
# Exibe a matrix de correçalação
ggcorrplot(title = "Correlation plot",
legend.title = "0.05 significant level",corr)
# Exibe a matrix de correçalação
ggcorrplot(title = "Correlation plot",
lab = T,corr)
# Exibe a matrix de correçalação
ggcorrplot(title = "Correlation plot",
method = "circle",
lab = T,corr)
# Exibe a matrix de correçalação
corr %>% ggcorrplot(title = "Correlation plot",
lab = T)
# Exibe a matrix de correçalação
corr %>% ggcorrplot(title = "Correlation plot",
lab = T, ggtheme = "theme_classic")
source("./R/helpers.R")
source("./R/plots.R")
View(scatter_plot)
summary(selected_features)
selected_features_summary <-  summary(selected_features)
capture.output(selected_features_summary, file = "./output/dataset_summary")
library(tidyverse)
library(ggcorrplot)
library(neptune)
source("./R/helpers.R")
source("./R/plots.R")
run <- neptune_init_run(
project="marcpires--dsa/car-price-prediction",
api_token=Sys.getenv("NEPTUNE_API_TOKEN")
)
library(neptune)
neptune_install()
library(tidyverse)
library(ggcorrplot)
source("./R/helpers.R")
source("./R/plots.R")
run <- neptune_init_run(
project="marcpires--dsa/car-price-prediction",
api_token=Sys.getenv("NEPTUNE_API_TOKEN")
)
dataset <- "./data/cardetails-clean.csv"
# load dataset
car_dataset <- read.csv(dataset)
View(car_dataset)
View(car_dataset)
View(car_dataset)
library(tidyverse)
library(ggcorrplot)
library(neptune)
library(tidymodels)
source("./R/helpers.R")
source("./R/plots.R")
run <- neptune_init(
project="marcpires--dsa/car-price-prediction",
api_token=Sys.getenv("NEPTUNE_API_TOKEN"),
name = "Data Analysis",
description = "Project aims to predict a car give, using regression models",
capture_hardware_metrics = T,
capture_stderr = T,
capture_stdout = T,
capture_traceback = T)
# Track dataset
neptune_track_files(run["artifacts/datasets"], dataset)
run <- neptune_init(
project="marcpires--dsa/car-price-prediction",
api_token=Sys.getenv("NEPTUNE_API_TOKEN"),
name = "Data Analysis",
description = "Project aims to predict a car give, using regression models",
capture_hardware_metrics = T,
capture_stderr = T,
capture_stdout = T,
capture_traceback = T)
library(renv)
renv::snapshot()
source("./R/helpers.R")
source("./R/plots.R")
dataset <- "./data/cardetails-clean.csv"
# load dataset
car_dataset <- read.csv(dataset)
features <- c("year", "kilometer","price")
selected_features <- car_dataset %>%
select(all_of(features))
price_hist <- histogram(selected_features, point_x = selected_features$price,
label_x = "Year", label_y = "Price",
plot_title = "Car prices")
View(histogram)
View(price_hist)
# Calcula a correlação entre as variáveis
corr <- cor(selected_features)
# Exibe a matrix de correçalação
corr %>% ggcorrplot(title = "Correlation plot",
lab = T, ggtheme = "theme_classic")
selected_features_summary <-  summary(selected_features)
capture.output(selected_features_summary, file = "./output/dataset_summary")
# Summary of dataset
dataset_summary <- summary(selected_features)
# Save the dataset summary in the ouput folder
capture.output(dataset_summary, file = "./output/selected-features-dataset_summary")
# Coefficient of determination for the plot title
R2 <- paste("R squared:", round(((cor(selected_features$price, selected_features$year))^2),4))
# Verify distribution of dependent variable
pricekm_plot <- scatter_plot(car_dataset,point_x = selected_features$year,
point_y = selected_features$price,
label_x = "Kilometer",
label_y = "Price",
plot_title = paste(R2, "Price vs Kilometers"),
plot_file = "price_x_kilometer.png",
plot_path = "./plots/")
ggsave(filename = "car_price_y_distribution.png", plot = pricekm_plot,
path = "./plots/", device = "png")
#Estimate an lm (Ordinary Linear Regression) model (price ~ year)
lm_price_model <-
linear_red() %>%
set_engine("lm")
library(tidymodels)
#Estimate an lm (Ordinary Linear Regression) model (price ~ year)
lm_price_model <-
linear_red() %>%
set_engine("lm")
#Estimate an lm (Ordinary Linear Regression) model (price ~ year)
lm_price_model <-
linear_reg() %>%
set_engine("lm")
View(price_hist)
View(lm_price_model)
lm_price_fit <- lm_price_model %>% fit(price ~ year, data = selected_features)
View(lm_price_fit)
lm_price_fit
plot(lm_price_fit)
lm_price_fit %>% extract_fit_engine()
lm_price_fit %>% extract_fit_engine()
lm_price_fit %>% extract_fit_engine() %>% summary()
tidy(lm_price_fit)
new_values <- data.frame(year = 2023)
View(new_values)
predict(lm_price_fit,new_data = new_values)
new_values <- data.frame(year = 2022)
predict(lm_price_fit,new_data = new_values)
car_dataset %>% select(price) %>% where(year = 2022)
car_dataset %>% select(price, where(year = 2022))
car_dataset %>% select(price)
car_dataset %>% select(price, year)
car_dataset %>% select(price, year) %>% where(price = 2022)
car_dataset %>% select(price, year) %>% where(2022)
